sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp + t((phi * bet)) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  sigm %*% t(phi) %*% sin_noisy
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 200)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
grade <- 3
alp <- input$alp
bet <- input$bet
pol_num <- input$fn
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp + t((phi * bet)) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  sigm %*% t(phi) %*% sin_noisy
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
pol_num <- input$fn
nums <- runif(nsamples,min=0,max=2*pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp + t((phi * bet)) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  sigm %*% t(phi) %*% sin_noisy
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
x <- seq(from= 0, to = 2*pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
output$chartplot <- renderPlotly({
set.seed(input$seed)
nsamples <- input$nsamples
noise <- input$noiseval
alp <- input$alp
bet <- input$bet
pol_num <- input$fn
nums <- runif(nsamples,min=0,max=2*pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
#beta <-
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp + t((phi * bet)) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  sigm %*% t(phi) %*% sin_noisy
p <- plot_ly()
x <- seq(from= 0, to = 2*pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
#plot_ly(y=sins,x=nums, color = I("red"))%>% add_lines() %>%  add_trace(x=nums, y=sin_noisy, color="green")
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
})
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
noise <- 0.2
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
alp <- 2.0
bet <- 100
pol_num <- 3
gety <- function(x,params) {
y <- params[1]
for (k in 2:length(params)){
y <- y + params[k] * x ^ (k-1)
}
y
}
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
noise <- 0.1
nsamples <- 40
alp <- 2.0
bet <- 100
pol_num <- 3
gety <- function(x,params) {
y <- params[1]
for (k in 2:length(params)){
y <- y + params[k] * x ^ (k-1)
}
y
}
shinyServer(function(input, output, session) {
output$chartplot <- renderPlotly({
set.seed(input$seed)
nsamples <- input$nsamples
noise <- input$noiseval
alp <- input$alp
bet <- input$bet
pol_num <- input$fn
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
#beta <-
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
#plot_ly(y=sins,x=nums, color = I("red"))%>% add_lines() %>%  add_trace(x=nums, y=sin_noisy, color="green")
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
})
})
bet <- input$bet
pol_num <- input$fn
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
noise <- 0.1
nsamples <- 40
alp <- 2.0
bet <- 10
pol_num <- 3
gety <- function(x,params) {
y <- params[1]
for (k in 2:length(params)){
y <- y + params[k] * x ^ (k-1)
}
y
}
alp <- input$alp
bet <- input$bet
pol_num <- input$fn
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
bet <- 5
pol_num <- input$fn
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
bet <- 0.1
pol_num <- 3
gety <- function(x,params) {
y <- params[1]
for (k in 2:length(params)){
y <- y + params[k] * x ^ (k-1)
}
y
}
shinyServer(function(input, output, session) {
output$chartplot <- renderPlotly({
set.seed(input$seed)
nsamples <- input$nsamples
noise <- input$noiseval
alp <- input$alp
bet <- input$bet
pol_num <- input$fn
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
#beta <-
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
#plot_ly(y=sins,x=nums, color = I("red"))%>% add_lines() %>%  add_trace(x=nums, y=sin_noisy, color="green")
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
})
})
noise <- input$noiseval
alp <- input$alp
bet <- input$bet
pol_num <- input$fn
nums <- runif(nsamples,min=-pi,max=pi)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
sins <- sin(nums)
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
bet <- 1
gety <- function(x,params) {
y <- params[1]
for (k in 2:length(params)){
y <- y + params[k] * x ^ (k-1)
}
y
}
alp <- input$alp
bet <- input$bet
pol_num <- input$fn
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
View(phi)
alp <- 2.0
bet <- 40
pol_num <- 3
gety <- function(x,params) {
y <- params[1]
for (k in 2:length(params)){
y <- y + params[k] * x ^ (k-1)
}
y
}
noise <- input$noiseval
alp <- input$alp
bet <- input$bet
pol_num <- input$fn
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
pol_num <- 30
noise <- input$noiseval
alp <- input$alp
bet <- input$bet
pol_num <- input$fn
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(sin_noisy)
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
sigm <- solve(sigm_inv)
for(pow in 2:(grade+1)){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
runApp()
0:3
bet <- input$bet
pol_num <- input$fn
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(rep(1,times=nsamples))
for(pow in 1:grade){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
nums <- runif(nsamples,min=-pi,max=pi)
sins <- sin(nums)
sin_noisy <- sins + rnorm(nsamples,mean = 0, sd=noise)
phi <- matrix(rep(1,times=nsamples))
for(pow in 1:grade){
phi<- cbind(phi, unlist(lapply(sin_noisy, '^', pow)))
}
I <- diag(grade+1)
sigm_inv <- I * alp +  bet * t(phi) %*% phi
sigm <- solve(sigm_inv)
mu <- bet *  ((sigm %*% t(phi)) %*% sin_noisy)
p <- plot_ly()
x <- seq(from= -pi, to = pi,length.out = 100)
for(i in 1:pol_num){
params <- rmvnorm(n=1,sigma=sigm,mean=mu)
y <- lapply(x,gety,params)
p <- p %>% add_lines(x = x, y=y )
}
p %>% add_trace(y=sins,x=nums, color = I("red")) %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
runApp()
runApp()
runApp()
params
runApp()
sigm_inv
sigm
runApp()
runApp()
params
phi
runApp()
p %>% add_trace(y=sins,x=nums, color = I("red"))%>% add_trace(y=sin(x),x=x, color = I("red"))  %>%  add_trace(x=nums, y=sin_noisy, color=I("green"))
w1 <- w1 - t(alp * (x%*%t(delt1)))
source('F:/Mesteri/ML/stat/Bayes regression/neuralnetwork.R', echo=TRUE)
runApp()
source('F:/Mesteri/ML/stat/Bayes regression/neuralnetwork.R', echo=TRUE)
